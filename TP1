import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import numpy as np

# Conversión RGB → YIQ
def rgb_to_yiq(im):
    arr = np.array(im).astype(float)
    R, G, B = arr[:,:,0], arr[:,:,1], arr[:,:,2]
    Y = 0.299*R + 0.587*G + 0.114*B
    I = 0.596*R - 0.274*G - 0.322*B
    Q = 0.211*R - 0.523*G + 0.312*B
    return np.stack((Y, I, Q), axis=-1)

# Conversión YIQ → RGB
def yiq_to_rgb(yiq):
    Y, I, Q = yiq[:,:,0], yiq[:,:,1], yiq[:,:,2]
    R = Y + 0.956*I + 0.621*Q
    G = Y - 0.272*I - 0.647*Q
    B = Y - 1.106*I + 1.703*Q
    rgb = np.stack((R, G, B), axis=-1)
    rgb = np.clip(rgb, 0, 255).astype(np.uint8)
    return Image.fromarray(rgb)

# Redimensionar manteniendo proporciones
def redimensionar(img, max_w, max_h):
    w, h = img.size
    ratio = min(max_w / w, max_h / h)
    return img.resize((int(w * ratio), int(h * ratio)))

# Mostrar imagen en etiqueta
def mostrar_imagen(img, etiqueta):
    img_redim = redimensionar(img, 300, 300)
    img_tk = ImageTk.PhotoImage(img_redim)
    etiqueta.config(image=img_tk)
    etiqueta.image = img_tk

# Cargar imagen
def cargar_imagen():
    ruta = filedialog.askopenfilename(filetypes=[("Imágenes", "*.jpg *.png *.jpeg *.bmp *.gif")])
    if ruta:
        global imagen_original, yiq_data
        imagen_original = Image.open(ruta).convert("RGB")
        yiq_data = rgb_to_yiq(imagen_original)
        mostrar_imagen(imagen_original, etiqueta_original)
        aplicar_proceso()

# Aplicar proceso YIQ
def aplicar_proceso(event=None):
    if imagen_original is None:
        return
    y_factor = float(slider_y.get())
    i_factor = float(slider_i.get())
    q_factor = float(slider_q.get())
    yiq_mod = yiq_data.copy()
    yiq_mod[:,:,0] *= y_factor
    yiq_mod[:,:,1] *= i_factor
    yiq_mod[:,:,2] *= q_factor
    global imagen_procesada
    imagen_procesada = yiq_to_rgb(yiq_mod)
    mostrar_imagen(imagen_procesada, etiqueta_procesada)

# Guardar imagen procesada
def guardar_imagen():
    if imagen_procesada:
        ruta = filedialog.asksaveasfilename(defaultextension=".png",
                                            filetypes=[("PNG", "*.png"), ("JPEG", "*.jpg"), ("BMP", "*.bmp")])
        if ruta:
            imagen_procesada.save(ruta)

# Interfaz
ventana = tk.Tk()
ventana.title("Procesamiento de imagen en la luminancia y cromaticidad")
ventana.geometry("800x400")

# Izquierda: Imagen original
frame_izq = tk.Frame(ventana)
frame_izq.pack(side="left", padx=10, pady=10)
tk.Label(frame_izq, text="Imagen Original").pack()
etiqueta_original = tk.Label(frame_izq)
etiqueta_original.pack()

# Centro: Controles
frame_centro = tk.Frame(ventana)
frame_centro.pack(side="left", padx=10, pady=10)
tk.Button(frame_centro, text="Cargar Imagen", command=cargar_imagen).pack(pady=10)

tk.Label(frame_centro, text="Luminancia Y").pack()
slider_y = tk.Scale(frame_centro, from_=0.0, to=2.0, resolution=0.1, orient="horizontal", command=aplicar_proceso)
slider_y.set(1.0)
slider_y.pack()

tk.Label(frame_centro, text="Crominancia I").pack()
slider_i = tk.Scale(frame_centro, from_=0.0, to=2.0, resolution=0.1, orient="horizontal", command=aplicar_proceso)
slider_i.set(1.0)
slider_i.pack()

tk.Label(frame_centro, text="Crominancia Q").pack()
slider_q = tk.Scale(frame_centro, from_=0.0, to=2.0, resolution=0.1, orient="horizontal", command=aplicar_proceso)
slider_q.set(1.0)
slider_q.pack()

tk.Button(frame_centro, text="Guardar Imagen", command=guardar_imagen).pack(pady=10)

# Derecha: Imagen procesada
frame_der = tk.Frame(ventana)
frame_der.pack(side="left", padx=10, pady=10)
tk.Label(frame_der, text="Imagen Procesada").pack()
etiqueta_procesada = tk.Label(frame_der)
etiqueta_procesada.pack()

# Variables globales
imagen_original = None
imagen_procesada = None
yiq_data = None

ventana.mainloop()
